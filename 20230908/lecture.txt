animation 속성
@keyframes -> 특정한 시간의 지점을 지정해서 해당 시간에
애니메이션이 얼마만큼 진척이 될지를 작성

@keyframes 애니메이션이름 {
    선택자/시간 {
        해당시간에 어떤 스타일을 적용할지
    }
}

-> 시간부분에는 진척도(%) 또는 시간(s)로 표현
시작: 0%(from), 중간: 50%, 끝: 100%(to)


animation 속성
animation-name: @keyframes로 정의한 애니메이션의 이름
animation-duration: 이 애니메이션이 몇 초 동안 지속이 되는가
animation-timing-function: 애니메이션의 진척 곡선 함수
  - ease, ease-in, ease-out, ease-in-out, linear, cubic-bezier
animation-delay: 딜레이

animation-iteration-count: 애니메이션이 몇 번 반복되냐
- 숫자 (1이 기본값, 여러 번 정수로 입력)
- infinite (무한 반복)

animation-direction: 애니메이션의 실행 방향을 설정
- normal(기본 값): from -> to 방향
- reverse(반대방향): to -> from 방향
- alternate(교대): 홀수번째 반복에는 from -> to, 짝수번째 반복에는 to -> from
- alternate-reverse: 짝 from -> to, 홀 to -> from

animation: <name> <duration> <timing-function> <delay> <iteration-count> <direction>



관점 perspective (POV: perspective of view)
-> Z축 방향으로 앞으로 튀어나오게 해주는 속성 값
px 단위로 설정할 수 있음

perspective: 120px;




CSS 변수 (variable) -> 변할 수 있는 값
:root { }
선언 -> --변수이름: 값;
사용 -> var(--변수이름);

변수 사용 예시
- #34DA78 처럼 복잡한 값을 여러 번 쓸 때 실수를 할 수 있기 때문에
"반복해서 사용하는 값"을 변수로 선언(정의)해서 사용
- color를 여러 곳이 같은 값이 쓰이는데 이거를 값으로 저장해버리면
전부 바꾸려면 시간이 오래걸림. 이때 변수를 사용하면
변수의 값을 한 번 바꾸면 모든 color 값을 한 번에 바꿀 수 있음
-> 미리보기 같은 느낌으로도 사용 가능 (폴백)
-> 실제 값이 아니라 임시로 설정한 값

없는 변수를 사용한다면 에러가 나지는 않음
-> 대신에 무언가를 해라
var(--변수, 값)
-> 변수가 없다면 뒤에 있는 값이 대신 하게 됨

HTML 코드의 style 속성에 바로 변수를 지정할 수 있음
-> 해당 태그에만 그 변수로 적용이 됨


숫자를 적용할 때 유의할 점: 단위를 같이 쓸 수 없음
변수에는 숫자만 쓰고 단위는 따로 써야 함
-> calc 함수를 이용해서 단위를 붙여줘야 함
calc(var(--변수) * 1px);